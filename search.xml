<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Ice 集成 Spring]]></title>
      <url>/2017/07/26/ice-spring/</url>
      <content type="html"><![CDATA[<p>把 Spring Framework 集成到 Ice 服务开发中其实很简单，我们只要确保 SpringContext 在一个 JVM 中只有一个实例即可。</p>
<a id="more"></a>
<p>另外一个需要注意的问题是我们需要注册 SpringContext 的 Shutdown hook，以便 JVM 在关闭时释放资源。</p>
<h2 id="编写工具类"><a href="#编写工具类" class="headerlink" title="编写工具类"></a>编写工具类</h2><p>我们写个简单的静态工具类，之后 Ice Object 中就可以通过调用 <code>SpringUtil.getBean(Class<t> clazz)</t></code> 获取到对应的 Bean 来完成具体业务操作了。</p>
<pre><code>public class SpringUtil {
    private static ClassPathXmlApplicationContext ctx;

    public static synchronized &lt;T&gt; T getBean(Class&lt;T&gt; beanCls) {
        if (ctx == null) {
            ctx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
            ctx.registerShutdownHook();
        }

        return ctx.getBean(beanCls);
    }

    public static synchronized void shutdown() {
        if (ctx != null) {
            ctx.close();
            ctx = null;
        }
    }
}
</code></pre><p>这里使用的是 ClassPathXmlApplicationContext，所以我们在 /src/main/resources 目录下编写一个 applicationContext.xml 文件就可以了。</p>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>最后需要说明的是，Spring 中的 Bean 都<strong>应该设置为 Lazy init</strong>。只有它们被真正调用时才触发创建过程，这在大量部署实例时是很关键的一个设置。</p>]]></content>
      
        <categories>
            
            <category> Ice </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ice </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[封装 Ice 客户端]]></title>
      <url>/2017/07/26/ice-client/</url>
      <content type="html"><![CDATA[<p>Ice 客户端的标准写法既繁琐又不利于复用，能否封装一个工具类来获取 Ice 客户端呢？</p>
<a id="more"></a>
<h2 id="Ice-客户端的标准写法"><a href="#Ice-客户端的标准写法" class="headerlink" title="Ice 客户端的标准写法"></a>Ice 客户端的标准写法</h2><pre><code>Ice.Communicator ic = null;
try {
    // 初始化通信器
    ic = Ice.Util.initialize(args);

    Ice.ObjectPrx base = ic.stringToProxy(&quot;Foo:default -p 10000&quot;);
    FooServicePrx proxy = FooServiceHelper.checkedCast(base);

    if (proxy == null) {
        throw new Error(&quot;Invalid proxy&quot;);
    } 
} catch(Exception e) {
    e.printStackTrace();
} finally {
    if (ic != null) {
        ic.destroy();
    }
}
</code></pre><p>这里存在以下几个问题。</p>
<ul>
<li>Locator 地址不能写死在代码里，它属于共用部分配置</li>
<li>Communicator 是重量级全局共享的对象，涉及线程池、Socket 连接等，每次的创建和销毁既影响性能又容易产生泄漏问题</li>
<li>Ice Object 的标识符（Identity，如上面的 Foo）与类名有 99% 的可能性是重合的，Identity + Prx 相当于是 Object Proxy 的类名</li>
<li>客户端的代码还是有点多</li>
</ul>
<h2 id="封装一个-Ice-客户端工具类"><a href="#封装一个-Ice-客户端工具类" class="headerlink" title="封装一个 Ice 客户端工具类"></a>封装一个 Ice 客户端工具类</h2><p>因此，我们可以写一个工具类，思路如下：</p>
<blockquote>读取配置文件，获得 Locator 地址并创建全局静态 Communicator 对象。在访问某个 Ice Object Proxy 时，根据其类名反推 Ice Object 的标识符，用反射方法生成Proxy 对象并返回。由于<br>Proxy 可能被多次使用，因此用 Map 缓存 Proxy，下次调用就不用再生成了。同时启动一个线程，在超过一定的闲置时间后，就关闭 Communicator 对象并移除 Map 中的 Proxy，释放资源。</blockquote>

<p>下面是具体的代码实现：</p>
<pre><code>package com.ucmed.foo.util

import Ice.ObjectPrx;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;

public class IceClientUtil {
    private static final String locatorKey = &quot;--Ice.Default.Locator&quot;;
    private static Logger logger = LoggerFactory.getLogger(IceClientUtil.class);
    private static volatile Ice.Communicator ic = null;
    private static Map&lt;Class, ObjectPrx&gt; cls2PrxMap = new HashMap&lt;&gt;();
    private static volatile long lastAccessTimestamp;
    private static volatile MonitorThread monitorThread;
    private static long idleTimeOutSeconds = 0;
    private static String iceLocator = null;

    // 延迟加载 Communicator
    public static Ice.Communicator getIceCommunicator() {
        if (ic == null) {
            synchronized (IceClientUtil.class) {
                if (ic == null) {
                    ResourceBundle resourceBundle = ResourceBundle.getBundle(&quot;iceclient&quot;, Locale.ENGLISH);
                    iceLocator = resourceBundle.getString(locatorKey);
                    idleTimeOutSeconds = Integer.parseInt(resourceBundle.getString(&quot;idleTimeOutSeconds&quot;));

                    logger.info(&quot;Ice client&apos;s locator is &quot; + iceLocator + &quot;, proxy cache timeout seconds:&quot; +
                            idleTimeOutSeconds);

                    String[] initParams = new String[]{locatorKey + &quot;=&quot; + iceLocator};
                    ic = Ice.Util.initialize(initParams);

                    createMonitorThread();
                }
            }
        }
        lastAccessTimestamp = System.currentTimeMillis();
        return ic;
    }

    // 创建并开启（守护）线程
    private static void createMonitorThread() {
        monitorThread = new MonitorThread();
        monitorThread.setDaemon(true);
        monitorThread.start();
    }

    // 关闭 Communicator，释放资源
    static void closeCommunicator(boolean removeServiceCache) {
        synchronized (IceClientUtil.class) {
            if (ic != null) {
                safeShutdown();
                monitorThread.interrupt();

                if (removeServiceCache &amp;&amp; !cls2PrxMap.isEmpty()) {
                    try {
                        cls2PrxMap.clear();
                    } catch (Exception e) {
                        logger.error(&quot;Map 清理失败：&quot; + e.getMessage());
                    }
                }
            }
        }
    }

    private static void safeShutdown() {
        try {
            ic.shutdown();
        } catch (Exception e) {
            logger.error(&quot;Ice.Communicator 关闭失败：&quot; + e.getMessage());
        } finally {
            ic.destroy();
            ic = null;
        }
    }

    // 反射创建 Object Proxy
    private static ObjectPrx createIceProxy(Ice.Communicator communicator, Class serviceCls) {
        ObjectPrx proxy;
        String clsName = serviceCls.getName();
        String serviceName = serviceCls.getSimpleName();

        int pos = serviceName.lastIndexOf(&quot;Prx&quot;);
        if (pos &lt;= 0) {
            throw new IllegalArgumentException(&quot;Invalid ObjectPrx class, class name must end with Prx&quot;);
        }
        String realSvName = serviceName.substring(0, pos);

        try {
            ObjectPrx base = communicator.stringToProxy(realSvName);
            proxy = (ObjectPrx) Class.forName(clsName + &quot;Helper&quot;).newInstance();
            Method method = proxy.getClass().getDeclaredMethod(&quot;uncheckedCast&quot;, ObjectPrx.class);
            proxy = (ObjectPrx) method.invoke(proxy, base);
            return proxy;
        } catch (Exception e) {
            logger.error(&quot;创建 ObjectPrx 失败：&quot; + e.getMessage());
            throw new RuntimeException(e);
        }
    }

    // 用于客户端 Api 获取 Ice 服务实例
    public static ObjectPrx getServicePrx(Class serviceCls) {
        ObjectPrx proxy = cls2PrxMap.get(serviceCls);
        if (proxy != null) {
            lastAccessTimestamp = System.currentTimeMillis();
            return proxy;
        }

        proxy = createIceProxy(getIceCommunicator(), serviceCls);
        cls2PrxMap.put(serviceCls, proxy);

        lastAccessTimestamp = System.currentTimeMillis();

        return proxy;
    }

    static class MonitorThread extends Thread {
        @Override
        public void run() {
            while (!Thread.currentThread().isInterrupted()) {
                try {
                    Thread.sleep(5000L);
                    if (lastAccessTimestamp + idleTimeOutSeconds * 1000L &lt; System.currentTimeMillis()) {
                        closeCommunicator(true);
                    }
                } catch (Exception e) {
                    logger.error(&quot;线程中断异常：&quot; + e.getMessage());
                }
            }
        }
    }
}
</code></pre><p>代码里面加载了一个名为 iceclient 的配置文件进行属性读取。所以，我们在 /src/main/resources 目录下创建 <strong>iceclient.properties</strong> 文件，内容可如下设置：</p>
<pre><code>--Ice.Default.Locator=IceGrid/Locator:tcp -h 192.168.22.216 -p 4061
idleTimeOutSeconds=300
</code></pre><p>具体属性值，可根据实际项目情况进行修改。</p>
<p>之后，我们就可以用一行代码，获取到 Ice 服务的客户端（代理）了：</p>
<pre><code>FooServicePrx proxy = (FooServicePrx) IceClientUtil.getServicePrx(FooServicePrx.class);
</code></pre><blockquote>需要注意的是，这里有一个隐含的<strong>契约式编程</strong>，即 Ice Object 的 Proxy 名字与在 IceGrid 中定义的 Object Identity 保持之前提到的这种（重合）关系。契约这样的做法，省去了很多不要的代码，这也是契约式编程在很多地方都被或多或少地使用的重要原因。</blockquote>]]></content>
      
        <categories>
            
            <category> Ice </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ice </tag>
            
            <tag> Ice 客户端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ice 使用自定义日志]]></title>
      <url>/2017/07/25/ice-log/</url>
      <content type="html"><![CDATA[<p>Ice 自身拥有一套日志接口定义与实现，那怎样才能使用第三方开源日志框架呢？</p>
<a id="more"></a>
<h2 id="Ice-默认日志接口"><a href="#Ice-默认日志接口" class="headerlink" title="Ice 默认日志接口"></a>Ice 默认日志接口</h2><p>出于性能和完整性方面的考虑，Ice 基本没有引入太多的第三方开源组件。因此，其日志也是自己做了一套接口定义和实现。在 Ice Object 中可以通过 <code>adapter.getCommunicator().getLogger()</code><br>方法，获取到 Logger 对象并输出日志。</p>
<p>但这个日志在 IceGrid 中默认会输出到 Node 节点的日志文件 node.stderr.log 中，且无法控制日志内容的格式。因此，我们来尝试使用第三方日志框架 slf4j + log4j 输出日志。</p>
<h2 id="使用第三方日志框架"><a href="#使用第三方日志框架" class="headerlink" title="使用第三方日志框架"></a>使用第三方日志框架</h2><h3 id="引入日志-jar-包"><a href="#引入日志-jar-包" class="headerlink" title="引入日志 jar 包"></a>引入日志 jar 包</h3><p>首先，在 build.gradle 中引入与 log4j 相关的 jar 包，如——</p>
<ul>
<li>org.slf4j:slf4j-api:1.7.21</li>
<li>org.slf4j:slf4j-log4j12:1.7.21</li>
<li>log4j:log4j:1.2.17</li>
</ul>
<h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><p>然后，我们在 /src/main/resources 目录下编写日志篇日志文件 log4j.properties，如下所示。可以从其他项目那边复制一份进行修改，这里就不展开说了。</p>
<pre><code>log4j.rootLogger=INFO,file

log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file.DatePattern=&apos;.&apos;yyyy-MM-dd
log4j.appender.file.Append=true

log4j.appender.file.File=${user.home}/logs/foo/default.log
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} [%c]-[%p] %m%n
</code></pre><h3 id="使用自定义-logger"><a href="#使用自定义-logger" class="headerlink" title="使用自定义 logger"></a>使用自定义 logger</h3><p>引入 jar 包、编写配置文件都完成后，我们就可以在服务中使用自定义 logger 并输出日志了。</p>
<h3 id="问题？"><a href="#问题？" class="headerlink" title="问题？"></a>问题？</h3><p>生产环境下，项目的日志一般都会写到某个文件中，那么问题就来了。</p>
<p><strong>第一个问题</strong></p>
<blockquote>问：在一个 IceGrid Node 上启动一个 Server 模板的两个实例，会产生两个 Java 进程，它们都会向配置文件中指定的文件写入日志，这就产生了冲突。怎么解决？<br><br>答：在日志文件名中使用 Java 传递进来的系统变量！<br></blockquote>

<p>比如我们可以在配置文件中定义日志文件如下所示：</p>
<pre><code>log4j.appender.file.File=${user.home}/logs/foo/${AppId}/default.log
</code></pre><p>这个日志文件名中的 <code>AppId</code> 变量，就可以接收到 Java 在启动时传递进来的选项值。</p>
<p>我们的 server-template 配置文件可以写成下面这样：</p>
<pre><code>&lt;server-template id=&quot;FooServerTemplate&quot;&gt;
    &lt;parameter name=&quot;id&quot;/&gt;
    &lt;icebox id=&quot;FooServer${id}&quot; exe=&quot;java&quot; activation=&quot;on-demand&quot;&gt;
        &lt;!-- 在这里设置了名为 AppId 的系统变量，它可以在 server 实例化的时候被具体赋 id 值 --&gt;
        &lt;option&gt;-DAppId=FooServer${id}&lt;/option&gt;
        &lt;option&gt;IceBoxServer&lt;/option&gt;
        &lt;env&gt;CLASSPATH=C:\Program Files (x86)\ZeroC\Ice-3.6.3\lib\*;C:\Users\ucmed\Desktop\foo\lib\*;C:\Users\ucmed\Desktop\foo\build\classes\main;C:\Users\ucmed\Desktop\foo\build\resources\main;&lt;/env&gt;
        &lt;service name=&quot;FooService&quot; entry=&quot;com.ucmed.foo.service.FooService&quot;&gt;
            &lt;adapter name=&quot;FooService&quot; id=&quot;FooService${id}&quot; endpoints=&quot;default&quot; replica-group=&quot;FooServiceRep&quot;&gt;&lt;/adapter&gt;
        &lt;/service&gt;
    &lt;/icebox&gt;
&lt;/server-template&gt;
</code></pre><p>这样一来，FooServer1 的日志写到 ~/logs/foo/FooServer1/default.log 文件中，FooServer2 的日志写到 ~/logs/foo/FooServer2/default.log 文件中，互不干扰，避免写入冲突。</p>
<p><strong>第二个问题</strong></p>
<blockquote>问：Ice 框架自身的运行日志是否也使用了我们自定义的 logger 进行输出？<br><br>答：并没有，需要进行改造。具体方法是写一个 Ice 默认日志接口的实现类，然后使用此实现类包装一个新的 IceBoxServer 作为 IceBox 的启动类进行使用。<br></blockquote>

<p>首先，写一个 Ice 默认日志接口的实现类，如下所示：</p>
<pre><code>package com.ucmd.foo.log;

import Ice.Logger;
import org.slf4j.LoggerFactory;

public class MySlf4jLogger implements Logger {
    private final org.slf4j.Logger logger;

    public MySlf4jLogger(org.slf4j.Logger logger) {
        super();
        this.logger = logger;
    }

    public MySlf4jLogger(String loggerName) {
        logger = LoggerFactory.getLogger(loggerName);
    }

    @Override
    public void print(String s) {
        logger.info(s);
    }

    @Override
    public void trace(String s, String s1) {
        logger.debug(s + &quot; &quot; + s1);
    }

    @Override
    public void warning(String s) {
        logger.warn(s);
    }

    @Override
    public void error(String s) {
        logger.error(s);
    }

    @Override
    public String getPrefix() {
        return null;
    }

    @Override
    public Logger cloneWithPrefix(String s) {
        return new MySlf4jLogger(s);
    }
}
</code></pre><p>然后，包装一个 IceBox 启动类 MySlf4jIceBoxServer，将 MySlf4jLogger 作为默认 logger，如下所示：</p>
<pre><code>package com.ucmed.foo.service;

import IceBox.Server;
import foo.log.MySlf4jLogger;

public class MySlf4jIceBoxServer {
    public static void main(String[] args) {
        Ice.InitializationData initData = new Ice.InitializationData();

        initData.properties = Ice.Util.createProperties();
        initData.properties.setProperty(&quot;Ice.Admin.DelayCreation&quot;, &quot;1&quot;);
        initData.logger = new MySlf4jLogger(&quot;mySlf4jLogger&quot;);

        Server server = new Server();
        System.exit(server.main(&quot;IceBox.Server&quot;, args, initData));
    }
}
</code></pre><p>最后，在 server-template 配置文件中，将 IceBoxServer 替换成我们包装的 MySlf4jIceBoxServer 作为 IceBox 的启动类就可以了。这样 Ice 框架自身的运行日志与我们的业务日志，都按照设置的格式写入到日志文件去中了。</p>
<pre><code>&lt;server-template id=&quot;FooServerTemplate&quot;&gt;
    &lt;parameter name=&quot;id&quot;/&gt;
    &lt;icebox id=&quot;FooServer${id}&quot; exe=&quot;java&quot; activation=&quot;on-demand&quot;&gt;
        &lt;!-- 在这里设置了名为 AppId 的系统变量，它可以在 server 实例化的时候被具体赋 id 值 --&gt;
        &lt;option&gt;-DAppId=FooServer${id}&lt;/option&gt;
        &lt;!-- 注意这里替换成了 MySlf4jIceBoxServer --&gt;
        &lt;option&gt;MySlf4jIceBoxServer&lt;/option&gt;
        &lt;env&gt;CLASSPATH=C:\Program Files (x86)\ZeroC\Ice-3.6.3\lib\*;C:\Users\ucmed\Desktop\foo\lib\*;C:\Users\ucmed\Desktop\foo\build\classes\main;C:\Users\ucmed\Desktop\foo\build\resources\main;&lt;/env&gt;
        &lt;service name=&quot;FooService&quot; entry=&quot;com.ucmed.foo.service.FooService&quot;&gt;
            &lt;adapter name=&quot;FooService&quot; id=&quot;FooService${id}&quot; endpoints=&quot;default&quot; replica-group=&quot;FooServiceRep&quot;&gt;&lt;/adapter&gt;
        &lt;/service&gt;
    &lt;/icebox&gt;
    &lt;/server-template&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> Ice </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ice </tag>
            
            <tag> 日志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建 Ice 开发环境]]></title>
      <url>/2017/07/24/ice-dev-env/</url>
      <content type="html"><![CDATA[<p>可以使用 Eclipse + Maven 以及 IDEA + Gradle 的方式来开发 Ice 项目，建议使用后者。</p>
<a id="more"></a>
<h2 id="选择-Ice-版本"><a href="#选择-Ice-版本" class="headerlink" title="选择 Ice 版本"></a>选择 Ice 版本</h2><p>Ice 版本及相关软件对应关系如下表所示——</p>
<table>
<thead>
<tr>
<th style="text-align:center">版本</th>
<th style="text-align:center">JDK</th>
<th style="text-align:center">下载</th>
<th style="text-align:center">构建工具</th>
<th style="text-align:center">IDE</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3.7</td>
<td style="text-align:center">1.8</td>
<td style="text-align:center"><a href="https://zeroc.com/download/Ice/3.7/Ice-3.7.0.msi" target="_blank" rel="external">Windows 版本</a></td>
<td style="text-align:center">Gradle</td>
<td style="text-align:center">IDEA</td>
</tr>
<tr>
<td style="text-align:center">3.6</td>
<td style="text-align:center">1.7, 1.8</td>
<td style="text-align:center"><a href="https://zeroc.com/download/Ice/3.6/Ice-3.6.3-WebInstaller.exe" target="_blank" rel="external">Windows 版本</a></td>
<td style="text-align:center">Gradle</td>
<td style="text-align:center">IDEA</td>
</tr>
<tr>
<td style="text-align:center">3.5</td>
<td style="text-align:center">1.6, 1.7</td>
<td style="text-align:center"><a href="https://zeroc.com/download/Ice/3.5/Ice-3.5.1-6.msi" target="_blank" rel="external">Windows 版本</a></td>
<td style="text-align:center">Maven</td>
<td style="text-align:center">Eclipse</td>
</tr>
</tbody>
</table>
<p>Ice Linux 版本下载方式详见官网：<a href="https://zeroc.com/distributions/ice" target="_blank" rel="external">https://zeroc.com/distributions/ice</a>。</p>
<p>本文以 Ice 3.6.3 版本为例。</p>
<p>Ice 下载、安装完成后，将其安装路径添加到名为 “ICE_HOME” 的环境变量中，同时添加 “%ICE_HOME%\bin” 到 Path 环境变量中，确保其中的命令行可以在命令行界面或 IDE 中执行。</p>
<p>上述安装和设置完成后，打开 Windows 命令行，执行 <code>slice2java -v</code>，如果出现版本号，如 “3.6.3”，则表示 Ice 安装成功，可以正常使用了。</p>
<h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><h3 id="使用-Eclipse-开发-Ice-项目"><a href="#使用-Eclipse-开发-Ice-项目" class="headerlink" title="使用 Eclipse 开发 Ice 项目"></a>使用 Eclipse 开发 Ice 项目</h3><p>使用 Eclipse 开发 Ice 项目，适合 Ice 3.6 以下版本（如 Ice 3.5）。相关软件为——</p>
<ul>
<li>JDK，如 jdk1.7.0_80</li>
<li>Eclipse，如 Eclipse Neon</li>
<li>Ice for Eclipse 插件</li>
</ul>
<p>Ice for Eclipse 插件其实是做了一个 Ant Task，负责把 Slice 文件自动转换为 Java 类。在 Eclipse 中修改了 Slice 文件并保存时，这个插件会自动调用 <code>slice2java.exe</code> 命令生成 Java 源码。</p>
<p>Eclipse Help → Install New Software，然后输入 <code><a href="http://www.zeroc.com/download/eclipse" target="_blank" rel="external">http://www.zeroc.com/download/eclipse</a></code>，并在出现的结果列表中选择相应的 Ice for Eclipse 项目，安装即可。</p>
<p>插件安装完成后，需在 Eclipse 中配置 Ice 的安装路径。在 Eclipse 菜单 Window → Preferences 中选择 Ice Builder，然后在右边的 SDK Location 输入框中输入 Ice 的安装路径，如 “C:\Program Files (x86)\ZeroC\Ice-3.6.3”。</p>
<p>插件安装和设置完成后，我们新建一个 Java 工程 icetest，然后在工程上点击右键，找到 “Ice Builder” 菜单，点击 “Add Ice Builder”。</p>
<p>我们再看一下项目结构，会发现新增了两个文件夹。一个是 slice 文件夹，这个是用来存放 Slice 文件的地方。另外一个 generated 文件夹，存放的是根据 Slice 文件自动转换生成的 Java 源码，项目编译运行需要用到它们。</p>
<h4 id="Eclipse-配合-Maven，构建-Ice-项目"><a href="#Eclipse-配合-Maven，构建-Ice-项目" class="headerlink" title="Eclipse 配合 Maven，构建 Ice 项目"></a>Eclipse 配合 Maven，构建 Ice 项目</h4><p>公司的项目绝大多数都已经采用了 Maven 管理和编译，那么怎么用 Maven 来标准化 Ice 项目呢？这里面主要涉及到两个问题：</p>
<ul>
<li>Slice 文件在 Maven 里的编译问题</li>
<li>自动生成的 Ice 服务的代码的位置问题</li>
</ul>
<p>为了解决 Slice 的编译问题，Ice 提供了一个 Ant 任务 slice2java，依赖于 Ice 中的 ant-ice.jar（<strong>注意：此 jar 包在 Ice 3.6 及以上版本中不再提供，也即 Ice 3.6 及 Ice 3.7 只支持 Gradle 构建</strong>）：</p>
<pre><code>&lt;taskdef name=&quot;slice2java&quot; classname=&quot;Slice2JavaTask&quot; classpathref=&quot;maven.plugin.classpath&quot; /&gt;
</code></pre><p>其用法如下，指定编译哪些文件（includes），以及输出 Java 源文件到哪个目录（outputdir）：</p>
<pre><code>&lt;slice2java outputdir=&quot;generated&quot;&gt;
    &lt;fileset dir=&quot;slice&quot; includes=&quot;*.ice&quot;&gt;&lt;/fileset&gt;
&lt;/slice2java&gt;
</code></pre><p>我们在标准的 POM 文件中增加 Slice 文件的编译任务，并且增加将编译后的源码加入 Source 的任务，即可解决上面的两个问题。</p>
<p>完整的 pom.xml 文件如下：</p>
<pre><code>&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.ucmed&lt;/groupId&gt;
    &lt;artifactId&gt;icetest&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;

    &lt;properties&gt;
        &lt;slice.home.dir&gt;C:\Program Files (x86)\ZeroC\Ice-3.5.1&lt;/slice.home.dir&gt;
    &lt;/properties&gt;

    &lt;repositories&gt;
        &lt;!-- 如有 Nexus 私服, 请添加 --&gt;

        &lt;repository&gt;
            &lt;id&gt;ice&lt;/id&gt;
            &lt;name&gt;ice Nexus Repository&lt;/name&gt;
            &lt;url&gt;https://repo.zeroc.com/nexus/content/repositories/releases/&lt;/url&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.zeroc&lt;/groupId&gt;
            &lt;artifactId&gt;ice&lt;/artifactId&gt;
            &lt;version&gt;3.5.1&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;
                &lt;version&gt;1.7&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;generate-sources&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;run&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;target name=&quot;slice2java&quot;&gt;
                                &lt;taskdef name=&quot;slice2java&quot; classname=&quot;Slice2JavaTask&quot; classpathref=&quot;maven.plugin.classpath&quot; /&gt;
                                &lt;slice2java outputdir=&quot;generated&quot;&gt;
                                    &lt;fileset dir=&quot;slice&quot; includes=&quot;*.ice&quot;&gt;&lt;/fileset&gt;
                                &lt;/slice2java&gt;
                            &lt;/target&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;dependencies&gt;
                    &lt;dependency&gt;
                        &lt;groupId&gt;com.zeroc&lt;/groupId&gt;
                        &lt;artifactId&gt;ant-ice&lt;/artifactId&gt;
                        &lt;scope&gt;system&lt;/scope&gt;
                        &lt;systemPath&gt;${slice.home.dir}\lib\ant-ice.jar&lt;/systemPath&gt;
                    &lt;/dependency&gt;
                &lt;/dependencies&gt;
            &lt;/plugin&gt;

            &lt;plugin&gt;
                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;1.7&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;add-source&lt;/id&gt;
                        &lt;phase&gt;generate-sources&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;add-source&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;sources&gt;
                                &lt;source&gt;generated&lt;/source&gt;
                            &lt;/sources&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;

            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.1&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;source&gt;1.7&lt;/source&gt;
                    &lt;target&gt;1.7&lt;/target&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre><h3 id="使用-IDEA-开发-Ice-项目"><a href="#使用-IDEA-开发-Ice-项目" class="headerlink" title="使用 IDEA 开发 Ice 项目"></a>使用 IDEA 开发 Ice 项目</h3><p>使用 IDEA 开发 Ice 项目，适合 Ice 3.6 及以上版本（如 Ice 3.6.3）相关软件为——</p>
<ul>
<li>JDK，如 jdk1.8.0_111</li>
<li>IntelliJ IDEA，如 IDEA 2017.2</li>
</ul>
<h4 id="IDEA-配合-Gradle，构建-Ice-项目"><a href="#IDEA-配合-Gradle，构建-Ice-项目" class="headerlink" title="IDEA 配合 Gradle，构建 Ice 项目"></a>IDEA 配合 Gradle，构建 Ice 项目</h4><p>关于 Gradle 的使用，这里不过多介绍，下面来看一个写好的 build.gradle 文件吧。</p>
<pre><code>// 项目标识
group &apos;com.ucmed.ice.study&apos;
version &apos;1.0-SNAPSHOT&apos;

// 使用 java 插件
apply plugin: &apos;java&apos;

// 源码兼容级别
sourceCompatibility = 1.8

// 仓库
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url &apos;http://192.168.0.114:8081/nexus/content/repositories/releases&apos;
    }
    maven {
        url &apos;https://repo.zeroc.com/nexus/content/repositories/releases&apos;
    }
}

// 项目依赖
dependencies {
    compile &apos;com.zeroc:ice:3.6.3&apos;
    compile &apos;com.zeroc:icebox:3.6.3&apos;
    compile &apos;org.slf4j:slf4j-api:1.7.9&apos;
    compile &apos;ch.qos.logback:logback-classic:1.2.3&apos;
    compile &apos;ch.qos.logback:logback-core:1.2.3&apos;
    compile &apos;org.springframework:spring-context:4.2.5.RELEASE&apos;
    compile &apos;org.springframework:spring-beans:4.2.5.RELEASE&apos;
    compile &apos;org.springframework:spring-core:4.2.5.RELEASE&apos;
    compile &apos;org.springframework:spring-web:4.2.5.RELEASE&apos;
    compile &apos;org.springframework:spring-webmvc:4.2.5.RELEASE&apos;
    compile &apos;org.springframework:spring-aop:4.2.5.RELEASE&apos;
    compile &apos;org.springframework:spring-context-support:4.2.5.RELEASE&apos;
    compile &apos;org.springframework:spring-tx:4.2.5.RELEASE&apos;
    compile &apos;org.springframework:spring-orm:4.2.5.RELEASE&apos;
    compile &apos;org.springframework:spring-jdbc:4.2.5.RELEASE&apos;
    compile &apos;org.springframework:spring-expression:4.2.5.RELEASE&apos;
    compile &apos;org.hibernate:hibernate-core:5.2.10.Final&apos;
    compile &apos;org.apache.commons:commons-dbcp2:2.1.1&apos;
    compile &apos;mysql:mysql-connector-java:6.0.6&apos;
    testCompile &apos;junit:junit:4.12&apos;
}

// compileSlice 任务，编译 Slice 文件，生成 Java 源码
task compileSlice(type: Exec) {

//    commandLine &apos;slice2java&apos;, &apos;--output-dir&apos;, &quot;${projectDir}/src/main/java&quot;,
//            &quot;${projectDir}/slice/TicketServer.ice&quot;

    // output-dir 此目录存放自动生成的 Java 源码
    // underscore 允许 Slice 标识符带有下划线
    commandLine &apos;slice2java&apos;, &apos;--underscore&apos;, &apos;--output-dir&apos;, &quot;${projectDir}/src/main/java&quot;,
            &quot;${projectDir}/slice/DoctorServer.ice&quot;

    // 后续如果有其他 Slice 文件需要编译成 Java 文件，就按照上面的格式，在这里添加即可
    // 记得添加完成后，点击 IDEA 右边的 Gradle 工具条，手动运行 compileSlice 任务，或直接点击 assemble/build 构建

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        println standardOutput.toString()
    }

}

// copyJars 任务，是我们自定义的任务，它将项目依赖的 jar 包拷贝到项目根目录下的 lib 文件夹，以供 IceGrid 使用 
task copyJars(type: Copy) {
    from configurations.runtime
    into &apos;lib&apos;
}

// 设置 UTF-8 编码，以免在构建时出现中文乱码
tasks.withType(JavaCompile) {
    options.encoding = &quot;UTF-8&quot;
}

// compileJava 任务依赖 compileSlice 任务   
gradle.projectsEvaluated {
    compileJava.dependsOn(compileSlice)
} 
</code></pre><p>Ice 官方也提供了一个叫做 <code>slice</code> 的 Ice Builder for Gradle 插件，对应的 <code>build.gradle</code> 文件示例如下：</p>
<pre><code>// 项目标识（根据实际进行替换）
group &apos;com.ucmed.ice&apos;
version &apos;1.0-SNAPSHOT&apos;

// 使用 java 插件
apply plugin: &apos;java&apos;

// 源码兼容级别（根据实际进行替换）
sourceCompatibility = 1.8

// 项目依赖的 jar 包所在仓库
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url &quot;http://192.168.0.114:8081/nexus/content/repositories/releases&quot;
    }
    maven {
        url &quot;https://repo.zeroc.com/nexus/content/repositories/releases&quot;
    }
}

// 项目依赖
dependencies {
    compile group: &apos;com.zeroc&apos;, name: &apos;ice&apos;, version: &apos;3.6.3&apos;
    compile group: &apos;com.zeroc&apos;, name: &apos;icebox&apos;, version: &apos;3.6.3&apos;
    compile group: &apos;org.slf4j&apos;, name: &apos;slf4j-api&apos;, version: &apos;1.7.21&apos;
    compile group: &apos;log4j&apos;, name: &apos;log4j&apos;, version: &apos;1.2.17&apos;
    compile group: &apos;org.slf4j&apos;, name: &apos;slf4j-log4j12&apos;, version: &apos;1.7.21&apos;
    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;
}

// 项目构建脚本
buildscript {
    // 脚本依赖的 jar 包所在仓库
    repositories {
        maven {
            url &quot;https://plugins.gradle.org/m2/&quot;
        }
    }
    // 脚本依赖
    dependencies {
        classpath &quot;gradle.plugin.com.zeroc.gradle.ice-builder:slice:1.4.1&quot;
    }
}

// 使用 slice 插件
apply plugin: &quot;com.zeroc.gradle.ice-builder.slice&quot;

// slice 属性定义，更多可参考 https://github.com/zeroc-ice/ice-builder-gradle
slice {
    // 定义自动生成的代码存储目录，Slice 文件默认目录为 /src/main/slice
    output file(&quot;/src/main/java&quot;)
}

// 设置 UTF-8 编码，以免在构建时出现中文乱码
tasks.withType(JavaCompile) {
    options.encoding = &quot;UTF-8&quot;
}
</code></pre><p>相比而言，第二个 <code>build.gradle</code> 文件更为简洁，我们不需要像第一个文件那样，为每一个 Slice 文件写一行编译说明了。所以，推荐大家参考第二个文件，来写我们实际项目的 <code>build<br>.gradle</code> 文件。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>建议使用 Gradle 构建 Ice 项目</strong>，以使用 Ice 的新发布版本，体验最新的特性和及时的 Bug 修复。可以在上面这个 build.gradle 文件的基础上进行相应改动，以满足实际项目需要。</p>
<p>开发时，可以在 IDEA 中配置本地安装好的 gradle 版本。Ice 官方使用的 gradlew 要下载全部版本的 gradle ，由于众所周知的网络原因，下载时基本都会卡住不动，所以不推荐。 </p>]]></content>
      
        <categories>
            
            <category> Ice </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ice </tag>
            
            <tag> 开发环境 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IcePatch2 命令行使用流程]]></title>
      <url>/2017/07/19/icepatch2/</url>
      <content type="html"><![CDATA[<p>IcePatch2 是 Ice 提供的部署工具，可以方便地实现分布式应用的服务部署与更新。</p>
<a id="more"></a>
<p>具体使用流程如下所示：</p>
<ol>
<li>编写一份配置文件，如：config.server，主要定义 <code>IcePatch2.InstanceName</code>、<code>IcePatch2.Endpoints</code>、<code>IcePatch2.Directory</code> 这 3 个属性。</li>
<li>然后创建待同步的 server 端数据目录，如：serverData，里面存放待同步的目录及文件。</li>
<li>运行 <code>icepatch2calc serverData</code>，压缩非空文件，计算校验和生成 IcePatch2.sum 文件。</li>
<li>运行 <code>icepatch2server –Ice.Config=config.server</code>，开启 icepatch2server 服务，等待 client 的 patch 请求。</li>
<li>创建 client 端数据目录，如：clientData，来同步对应的 server 端数据目录中的数据（也就是目录及文件）。</li>
<li>在 client 端数据目录下运行 <code>icepatch2client –IcePatch2Client.Proxy=”${IcePatch2.InstanceName}/server:${IcePatch2.Endpoints}”</code>，开启 icepatch2client 服务，开始同步 server 端的数据。当然，也可以跟 server 端一样，将 <code>IcePatch2Client.Proxy</code> 这些属性放在一个独立的属性文件里，如：config.client，然后使用 <code>–Ice.Config=config.client</code> 来引入。</li>
</ol>
<blockquote>client 端第一次同步数据可能会时间长点。</blockquote>

<p>server 端数据如果发生变动，如新增/删除了文件、文件内容有变更，需要先停止 icepatch2server 服务。然后运行 <code>icepatch2calc serverData</code> 重新压缩文件、计算校验和，再开启<br>icepatch2server 服务。最后开启 icepatch2client 服务，以同步最新的改动。</p>]]></content>
      
        <categories>
            
            <category> Ice </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ice </tag>
            
            <tag> IcePatch2 </tag>
            
            <tag> 应用部署 </tag>
            
            <tag> 应用升级 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
